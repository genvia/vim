" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

if has("vms")
  set nobackup
else
  set backup
endif

map Q gq

if has("autocmd") 
  filetype plugin indent on
  augroup vimrcEx
  au!
  autocmd FileType text setlocal textwidth=0
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  augroup END
else
  set autoindent
endif

" DiffOrig命令将当前文件状态与文件刚打开时进行对比
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

" Vundle
" set rtp+=~/.vim/bundle/vundle/  
" call vundle#begin()
" call vundle#rc()  

call plug#begin('~/.vim/plugged')

Plug 'gmarik/vundle'
Plug 'https://github.com/vim-scripts/a.vim.git'
Plug 'vim-scripts/L9'
Plug 'rizzatti/dash.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'powerline/powerline'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree'
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'https://github.com/vim-scripts/EasyGrep.git'
Plug 'ervandew/supertab'
Plug 'mattn/emmet-vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'https://github.com/niumeng07/vim-colorschemes.git'
Plug 'mileszs/ack.vim'
Plug 'Yggdroot/indentLine'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'artur-shaik/vim-javacomplete2'
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim/'}
Plug 'derekwyatt/vim-scala'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'CodeFalling/fcitx-vim-osx'
Plug 'wsdjeg/FlyGrep.vim'
Plug 'hecal3/vim-leader-guide'
Plug 'mhinz/vim-signify'
" Plug 'Chiel92/vim-autoformat'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'rking/ag.vim'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.vim/plugged/fzf', 'do': './install --all' }
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

call plug#end()
" call vundle#end()

" the glaive#Install() should go after the call vundle#end()
call glaive#Install()

" shoud go after call glaive#Install()
Glaive codefmt plugin[mappings]

let g:codefmt="java -jar"
let g:google_java_executable=$HOME."/.vim/google-java-format-1.7-all-deps.jar"

syntax on
set fileencodings=utf-8,gb2312,gbk,gb18030
set termencoding=utf-8
set fileformats=unix
set encoding=utf-8
set number
set backspace=indent,eol,start
set history=50
" C++ public/private关键字不缩进
set cinoptions+=g0

set tabstop=4
set softtabstop=4
set shiftwidth=4
" .cpp, .c, .h文件缩进两格
autocmd FileType cpp,c,h set sw=2 ts=2

" 其它文件缩进值
set sw=4
set ts=4

set smarttab
set nobackup
set nocompatible
set et
set smartindent
set lbr 
set fo+=mB
set sm
set selection=inclusive
set wildmenu
set mousemodel=popup
set ruler
set showcmd
set autoindent
set cindent
set expandtab
set hlsearch
set incsearch
set cul 
" set cursorcolumn
set ignorecase smartcase
set nocp  
set t_Co=256
set foldenable
" 关闭报警音
set vb

" 开启文件类型检测
filetype plugin on

" 对python文件开启列颜色
autocmd FileType python set ai
autocmd FileType python set cursorcolumn

" Java/Scala Complete
" autocmd FileType java setlocal omnifunc=javacomplete#Complete
" autocmd FileType scala setlocal omnifunc=scalacomplete#Complete

" colorscheme
color solarized

hi Pmenu ctermfg=black ctermbg=grey
hi PmenuSel ctermfg=008 ctermbg=2
hi CursorLine term=standout ctermbg=0 cterm=NONE
hi CursorColumn term=standout ctermbg=0 cterm=NONE
hi Visual term=standout ctermbg=235
hi Search term=standout ctermfg=238 ctermbg=248
hi LineNr term=standout ctermfg=grey ctermbg=008
hi CursorLineNr term=standout ctermfg=white ctermbg=008
hi Constant ctermfg=30
hi Include ctermfg=243
hi Comment ctermfg=DarkGrey
hi MatchParen ctermfg=white cterm=NONE
hi SyntasticWarning term=standout cterm=standout
hi SyntasticStyleWarning term=standout cterm=standout
hi SyntasticError term=standout cterm=standout
hi SignColumn ctermbg=008
hi VertSplit ctermbg=008 ctermfg=000
hi NonText ctermfg=008
hi TagbarHighlight ctermbg=000

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

let syntastic_always_populate_loc_list = 1
let syntastic_auto_loc_list = 1
let syntastic_check_on_open = 0
let syntastic_check_on_wq = 0
let syntastic_error_symbol = '✗'
let syntastic_warning_symbol = '⚠'
let g:syntastic_enable_highlighting = 0
let g:syntastic_enable_signs = 1
let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
" hi SyntasticErrorSign ctermbg=008 ctermfg=88
" hi SyntasticWarningSign ctermbg=008 ctermfg=190

" suptertab
let SuperTabDefaultCompletionType="context"

" tagbar
let tagbar_width = 30
let tagbar_ctags_bin='/usr/local/bin/ctags'
let tagbar_autofocus = 1
let tagbar_zoomwidth = 0
let tagbar_autoclose = 0
let tagbar_autopreview = 0
let tagbar_sort = 0

" NERD tree
let NERDChristmasTree=0
let NERDTreeWinSize=30
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="left"
" open NERDTree when open a new file
" autocmd vimenter * if !argc() | NERDTree | endif
" jump to main window when open a new file
autocmd vimenter * if !argc() | wincmd p | endif
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd BufEnter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif

" powerline
set guifont=PowerlineSymbols\ for\ Powerline
let Powerline_symbols = 'fancy'
set laststatus=2
if exists("*fugitive#statusline")
    set statusline+=%{fugitive#statusline()} 
endif
set rtp+=~/.vim/plugged/powerline/powerline/bindings/vim

" ctrlp
let ctrlp_working_path_mode = '0'
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let ctrlp_use_caching = 0
endif

" YouCompleteMe
let ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let ycm_confirm_extra_conf=0

" Markdown tabular, vim-markdown
let vim_markdown_folding_disabled = 1
let vim_markdown_override_foldtext = 0
let vim_markdown_folding_level = 6
let vim_markdown_toc_autofit = 1
let vim_markdown_no_default_key_mappings = 1
let vim_markdown_emphasis_multiline = 0

" fzf
set rtp+=~/.vim/plugged/fzf.vim/

" indentLine
let indentLine_char = '┊'
let indentLine_fileType = ['py']

au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif 
set completeopt=menuone,menu,longest
set completeopt=preview,menu
set completeopt=longest,menu

" 快捷键
" map <F8> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
map <C-e> : q<CR>
map <C-p> : FZF<CR>
map <C-]> : YcmCompleter GoToDefinitionElseDeclaration<CR>

" Snippets
let g:UltiSnipsExpandTrigger="<C-x>"

" Ag for vim
set runtimepath^=~/.vim/plugged/ag.vim

" FlyGrep
" map <F3> :FlyGrep<CR>

" go def
let g:go_def_mode='godef'

" Leaderf
let g:Lf_WindowPosition = "right"
command LF : LeaderfFunction

" VIM copy同时Copy到系统剪切板
set clipboard+=unnamed
